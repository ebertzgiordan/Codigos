# Importar o modulo pygame
import pygame
# Importar random para numeros aleatorios
import random

import os

# Especifica o nome do diretório que será criado
diretorio = "trabalho"

# Cria o diretório
os.mkdir(diretorio)
# Importar pygame.locals para facilitar o acesso as principais coordenadas
# Atualizado para estar em conformidade com os padroes flake8 e black
# from pygame.locals import *
from pygame.locals import (
    RLEACCEL,
    K_UP,
    K_DOWN,
    K_LEFT,
    K_RIGHT,
    K_ESCAPE,
    KEYDOWN,
    QUIT,
)

# Defina constantes para a largura e altura da tela
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Defina o objeto Player estendendo pygame.sprite.Sprite
# Ao inves de uma Surface, usamos uma imagem para um sprite mais bonito
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        self.surf = pygame.image.load(“jet.png”).convert()
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect()
    
    # Mova o sprite com base nas teclas pressionadas pelo usuario
    def update(self, pressed_keys):
        if pressed_keys[K_UP]:
            self.rect.move_ip(0, -5)
        if pressed_keys[K_DOWN]:
            self.rect.move_ip(0, 5)
        if pressed_keys[K_LEFT]:
            self.rect.move_ip(-5, 0)
        if pressed_keys[K_RIGHT]:
            self.rect.move_ip(5, 0)
            
        # Mantenha o jogador na tela
        if self.rect.left < 0:
            self.rect.left = 0
        elif self.rect.right > SCREEN_WIDTH:
            self.rect.right = SCREEN_WIDTH
        if self.rect.top <= 0:
            self.rect.top = 0
        elif self.rect.bottom >= SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT

# Defina o objeto inimigo estendendo pygame.sprite.Sprite
# Ao inves de uma surface, usamos uma imagem para um sprite mais bonito
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super(Enemy, self).__init__()
        self.surf = pygame.image.load(“missile.png”).convert()
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        
        # A posicao inicial e gerada aleatoriamente, assim como a velocidade
        self.rect = self.surf.get_rect(
            center=(
                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
                random.randint(0, SCREEN_HEIGHT),
            )
        )
        self.speed = random.randint(5, 20)
    
    # Mova o inimigo com base na velocidade
    # Remova-o quando ele passar pela borda esquerda da tela
    def update(self):
        self.rect.move_ip(-self.speed, 0)
        if self.rect.right < 0:
            self.kill()

# Defina a extensao do objeto de nuvem pygame.sprite.Sprite
# Use uma imagem para um sprite mais bonito
class Cloud(pygame.sprite.Sprite):
    def __init__(self):
        super(Cloud, self).__init__()
        self.surf = pygame.image.load(“cloud.png”).convert()
        self.surf.set_colorkey((0, 0, 0), RLEACCEL)
        
        # A posicao inicial e gerada aleatoriamente
        self.rect = self.surf.get_rect(
            center=(
            random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
            random.randint(0, SCREEN_HEIGHT),
                    )
       )
 # Mova a nuvem com base em uma velocidade constante
 # Remova a nuvem quando ela passar pela borda esquerda da tela
    def update(self):
        self.rect.move_ip(-5, 0)
        if self.rect.right < 0:
            self.kill()

# Iniciar o programa
pygame.init()

# Configura o relogio para uma taxa de quadros decente
clock = pygame.time.Clock()

# Crie o objeto de tela
# O tamanho e determinado pela constante SCREEN_WIDTH e SCREEN_HEIGHT
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# Criar eventos personalizados para adicionar um novo enemy e uma nova cloud
ADDENEMY = pygame.USEREVENT + 1
pygame.time.set_timer(ADDENEMY, 250)
ADDCLOUD = pygame.USEREVENT + 2
pygame.time.set_timer(ADDCLOUD, 1000)

# Crie o ‘player’
player = Player()

# Cria grupos para manter sprites enemies, clouds e all_sprites
# - enemies sao usados para deteccao de colisao e atualizacoes de posicao
# - clouds sao usado para atualizacoes de posicao
# - all_sprites sao usados para renderizar
enemies = pygame.sprite.Group()
clouds = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()
all_sprites.add(player)

# Variavel para manter o loop principal funcionando
running = True

# Loop Principal
while running:

    # Verificar cada evento na fila
    for event in pygame.event.get():

        # O usuario pressionou alguma tecla?
        if event.type == KEYDOWN:

            # Foi a tecla ESC? Nesse caso, pare o loop.
            if event.key == K_ESCAPE:
                running = False

        # O usuario pressionou o botao Fechar Janela? Nesse caso, pare o loop.
        elif event.type == QUIT:
            running = False

        # Criar um novo enemy?
        elif event.type == ADDENEMY:

            # Cria um novo enemy e adiciona ele aos grupos de sprite
            new_enemy = Enemy()
            enemies.add(new_enemy)
            all_sprites.add(new_enemy)

        # Adicionar uma nova cloud?
        elif event.type == ADDCLOUD:

            # Cria a nova cloud e adiciona aos grupos de sprite
            new_cloud = Cloud()
            clouds.add(new_cloud)
            all_sprites.add(new_cloud)

    # Captura o conjunto de teclas pressionadas e verifique a entrada do usuario
    pressed_keys = pygame.key.get_pressed()
    player.update(pressed_keys)

    # Atualiza a posicao de enemies e clouds
    enemies.update()
    clouds.update()

    # Preenche a tela com azul celeste
    screen.fill((135, 206, 250))

    # Desenha todos os nossos sprites
    for entity in all_sprites:
        screen.blit(entity.surf, entity.rect)

    # Verifica se algum inimigo colidiu com o jogador
    if pygame.sprite.spritecollideany(player, enemies):

        # Se sim, remova o player
        player.kill()

        # Para o loop
        running = False

    # Atualiza a tela
    pygame.display.flip()

    # Garante que o programa mantenha uma taxa de 30 quadros por segundo
    clock.tick(30)
    
